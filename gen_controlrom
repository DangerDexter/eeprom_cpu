#!/usr/bin/perl
use strict;
use warnings;

# List of constant values from the input file
my %Val;

my @TOPROM;
my @BOTROM;

my $instruction=0;	# Current instruction opcode
my $instructionval=0;	# Current instruction value

die("Usage: $0 control_logic\n") if (@ARGV!=1);

# Read in the description of the control logic
open(my $IN, "<", "control_logic") || die("Can't read control_logic: $!\n");
while (<$IN>) {
  chomp;

  # Lose comments
  s{\s*#.*}{};

  # Skip empty lines
  next if (m{^$});

  # Save constant values
  if (m{(\S+)\s*=\s*(\S+)}) {
    $Val{$1}= hex($2);
    #print("Val $1 is $Val{$1}\n");
    next;
  }

  # Start of an instruction definition
  if (defined($Val{$_})) {
    $instruction= $_;
    $instructionval= $Val{$instruction}; next;
  }

  # A phase line
  if (m{(.*):\s*(.*)}) {
    my ($left, $right)= ($1,$2);
    #print("Doing $instruction ($instructionval) $_\n");

    # Get the phase and any flags
    my ($phase, @flaglist)= split(m{,\s*}, $left);

    # Get the control lines to enable
    my $controlbits=0;
    foreach my $line (split(m{,\s*}, $right)) {
      if (!defined($Val{$line})) { die("Unknown line >$line<\n"); exit(1); }
      $controlbits |= $Val{$line};
    }

    # Error check the phase
    if (!defined($Val{$phase})) { die("Unknown phase $phase\n"); exit(1); }
    my $phaseval= $Val{$phase};

    # Error check the flag, or set value of 0 to indicate all flag combinations
    my $flagmask= 0;
    foreach my $flag (@flaglist) {
      if (!defined($Val{$flag})) { die("Unknown flag $flag\n"); exit(1); }
      $flagmask |= $Val{$flag};
    }

    # Set the control bits for the specified flag values
    for (my $flagval=0; $flagval <= 0xf; $flagval ++) {
      if (($flagmask==0) || ($flagval & $flagmask)) {
	# 13 bits: ffffp.ppiiiiii, f=flag, p=phase, i=instruction
        my $romrow= $instructionval | ($phaseval << 6) | ($flagval << 9);
        $TOPROM[ $romrow ] = $controlbits >> 8;
        $BOTROM[ $romrow ] = $controlbits & 0xff;
        #printf("romrow %x controlbits %x\n", $romrow, $controlbits);
      }
    }
  }
}
close($IN);

# Write out the ROMs
open( my $OUT, ">", "botctrl.rom" ) || die("Can't write to botctrl.rom: $!\n");
print( $OUT "v2.0 raw\n" );
for my $i ( 0 .. ( 2**13 - 1 ) ) {
    printf( $OUT "%x ", $BOTROM[$i] ? $BOTROM[$i] : 0 );
    print( $OUT "\n" ) if ( ( $i % 8 ) == 7 );
}
close($OUT);

open($OUT, ">", "topctrl.rom" ) || die("Can't write to topctrl.rom: $!\n");
print( $OUT "v2.0 raw\n" );
for my $i ( 0 .. ( 2**13 - 1 ) ) {
    printf( $OUT "%x ", $TOPROM[$i] ? $TOPROM[$i] : 0 );
    print( $OUT "\n" ) if ( ( $i % 8 ) == 7 );
}
close($OUT);
exit(0);
