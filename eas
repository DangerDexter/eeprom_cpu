#!/usr/bin/perl
#
# Assembler for Warren's 16-bit CPU. (c) 2017, GPL3
#
use strict;
use warnings;
use Curses;
use Data::Dumper;
my ( $debug, $easdebug ) = ( 0, 0 );

# List of known labels and their addresses
my %Label;

# List of instruction names and their length in bytes
my @Instlist = (
    [ 'adda', 1 ], [ 'suba', 1 ], [ 'anda', 1 ], [ 'ora',  1 ],
    [ 'xora', 1 ], [ 'jmp',  3 ], [ 'tba',  1 ], [ 'incb', 1 ],
    [ 'addb', 1 ], [ 'subb', 1 ], [ 'andb', 1 ], [ 'orb',  1 ],
    [ 'xorb', 1 ], [ 'tab',  1 ], [ 'lca',  2 ], [ 'lcb',  2 ],

    [ 'addm', 3 ], [ 'subm', 3 ], [ 'andm', 3 ], [ 'orm', 3 ],
    [ 'xorm', 3 ], [ 'lma',  3 ], [ 'lmb',  3 ], [ 'jlt', 3 ],
    [ 'jeq',  3 ], [ 'jne',  3 ], [ 'jge',  3 ], [ 'jle', 3 ],
    [ 'jgt',  3 ], [ 'sma',  3 ], [ 'smb',  3 ], [ 'jcs', 3 ],

    [ 'jvs',  3 ], [ 'jcc',  3 ], [ 'jvc',  3 ], [ 'ttia', 1 ],
    [ 'ttib', 1 ], [ 'ttoa', 1 ], [ 'ttob', 1 ], [ 'lia',  3 ],
    [ 'nop',  1 ], [ 'sub',  1 ], [ 'nop',  1 ], [ 'nop',  1 ],
    [ 'nop',  1 ], [ 'sia',  3 ], [ 'nop',  1 ], [ 'incm', 3 ],

    [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ],
    [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ],
    [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ],
    [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ], [ 'nop', 1 ],
);

# Given a label or a non-string literal, return its value
sub getValue {
    my $arg = shift;

    die("null argument in getValue\n") if ( !defined($arg) );

    # Decimal number
    return ($arg) if ( $arg =~ m{^\d+$} );

    # Octal or decimal number
    return ( oct($arg) ) if ( $arg =~ m{^0} );

    # Literal character
    return ( ord($1) ) if ( $arg =~ m{^'(.)'} );

    # Label
    return ( $Label{$arg} ) if ( defined( $Label{$arg} ) );

    die("Unrecognised literal or label: $arg\n");
}

#### MAIN PROGRAM ####

# Enable debugging
if ( ( @ARGV >= 1 ) && ( $ARGV[0] ) eq "-d" ) {
    $debug = 1;
    shift(@ARGV);
}
$easdebug = 1 if ( $debug && ( $0 =~ m{eas$} ) );

# Give usage
die("Usage: $0 infile\n") if ( @ARGV != 1 );

# Convert the instruction list into a hash keyed by instruction name
my %Instruction;
foreach my $posn ( 0 .. ( $#Instlist - 1 ) ) {
    my ( $name, $len ) = @{ $Instlist[$posn] };
    $Instruction{$name} = { posn => $posn, len => $len };
}

# Read in the instructions
my @Line;
open( my $IN, "<", $ARGV[0] ) || die("Cannot read $ARGV[0]: $!\n");
while (<$IN>) {
    chomp;
    s{\s*#.*}{};    	# Lose comments
    next if (m{^$});    # Ignore empty lines
    push( @Line, $_ );
}
close($IN);

# First pass: find the labels
my $PC      = 0;
my $dataloc = 0x8000;

foreach my $i (@Line) {
    my ( $label, $op, $addr ) = split( m{\s+}, $i );
    $label =~ s{:}{};

    #print("PC $PC, dataloc $dataloc: $label then $op then $addr\n");
    if ($label) {    # Save location of label
        if ( $op eq "rombyte" ) {
            $Label{$label} = $PC; $PC++; next;
        }
        if ( $op eq "romword" ) {
            $Label{$label} = $PC; $PC += 2; next;
        }
        if ( $op eq "byte" ) {
            $Label{$label} = $dataloc; $dataloc++; next;
        }
        if ( $op eq "word" ) {
            $Label{$label} = $dataloc; $dataloc += 2; next;
        }
        if ( $op eq "equ" ) {
            $Label{$label} = getValue($addr); next;
        }
        if ( $op eq "string" ) {
            my $strlen = length($addr) + 1;
            $Label{$label} = $PC;
            $PC += $strlen;
            next;
        }
    }

    # We got here with a real instruction. Increment the PC
    die("Unrecognised instruction $op\n") if ( !defined( $Instruction{$op} ) );
    if ($label) { $Label{$label} = $PC; }
    $PC += $Instruction{$op}{len};
}


# Second pass: generate the machine code
my @RAM;
$PC      = 0;
$dataloc = 0x8000;

foreach my $i (@Line) {
    my ( $label, $op, $addr ) = split( m{\s+}, $i );
    $label =~ s{:}{};

    if ( $op eq "rombyte" ) { $RAM[ $PC++ ] = getValue($addr); next; }
    if ( $op eq "romword" ) { $RAM[$PC] = getValue($addr); $PC += 2; next; }
    if ( $op eq "byte" ) { $dataloc++; next; }
    if ( $op eq "word" ) { $dataloc += 2; next; }
    next if ( $op eq "equ" );

    if ( $op eq "string" ) {
        foreach my $posn ( 0 .. length($addr) ) {
            $RAM[ $PC++ ] = ord( substr( $addr, $posn, 1 ) );
        }
        $RAM[ $PC++ ] = 0; next;    # NUL
    }

    # We got here with a real instruction.
    die("Unrecognised instruction $op\n") if ( !defined( $Instruction{$op} ) );
    my $posn = $Instruction{$op}{posn};
    my $len  = $Instruction{$op}{len};
    my ( $hival, $loval );
    printf( "%04x: $op ", $PC ) if ($easdebug);

    $RAM[ $PC++ ] = $posn;
    my $val;
    printf( "\t%02x\n", $posn ) if ( $easdebug && ( $len == 1 ) );

    if ( $len > 1 ) {
        $val   = getValue($addr); $hival = $val >> 8; $loval = $val & 0xff;
    }
    if ( $len == 2 ) {
        $RAM[ $PC++ ] = $loval;
        printf( "%02x\t%02x %02x\n", $loval, $posn, $loval ) if ($easdebug);
    }
    if ( $len == 3 ) {
        $RAM[ $PC++ ] = $hival; $RAM[ $PC++ ] = $loval;
        printf( "%04x\t%02x %02x %02x\n", $val, $posn, $hival, $loval )
          if ($easdebug);
    }
}

# Write out the program ROM
if ( $0 =~ m{eas$} ) {
    open( my $OUT, ">", "program.rom" )
      || die("Can't write to program.rom: $!\n");
    print( $OUT "v2.0 raw\n" );
    for my $i ( 0 .. ( 2**12 - 1 ) ) {
        printf( $OUT "%02x ", $RAM[$i] ? $RAM[$i] : 0 );
        print( $OUT "\n" ) if ( ( $i % 16 ) == 15 );
        print( $OUT " " )  if ( ( $i % 16 ) == 7 );
    }
    close($OUT);
    exit(0);
}

# Given a new B value, work out the N and Z flags. Truncate the value
sub flags {
    my $B = shift;
    my $N = ( $B & 0x80 ) ? 1 : 0;
    my $Z = ( $B == 0 ) ? 1 : 0;
    return ( $B & 0xff, $N, $Z );
}

# Given two arguments, add them. Return the result and the N, Z, V, C flags
sub add {
    my ( $A, $B ) = @_;
    my ( $sum, $N, $Z, $V, $C );
    $sum = $A + $B;
    $C = ( $sum & 0x100 ) ? 1 : 0;

    my $asign = $A & 0x80;
    my $bsign = $B & 0x80;
    my $rsign = $sum & 0x80;
    $V = ( ( $asign == $bsign ) && ( $rsign != $asign ) ) ? 1 : 0;
    ( $sum, $N, $Z ) = flags($sum);
    return ( $sum, $N, $Z, $V, $C );
}

# Given two arguments, subtract them. Return the result & the N, Z, V, C flags
sub minus {
    my ( $A, $B ) = @_;
    my ( $sum, $N, $Z, $V, $C );
    $sum = $A - $B;
    $C = ( $sum & 0x100 ) ? 1 : 0;

    my $asign = $A & 0x80;
    my $bsign = $B & 0x80;
    my $rsign = $sum & 0x80;
    $V = ( ( $asign == $bsign ) && ( $rsign != $asign ) ) ? 1 : 0;
    ( $sum, $N, $Z ) = flags($sum);
    return ( $sum, $N, $Z, $V, $C );
}

# Given a PC value, disassemble and print the instruction at that location
sub disasm {
    my $PC     = shift;
    my $opcode = $Instlist[ $RAM[$PC] ]->[0];
    my $len    = $Instlist[ $RAM[$PC] ]->[1];

    printf( "%04x: %s ", $PC, $opcode );
    printf( "%02x", $RAM[ $PC + 1 ] ) if ( $len == 2 );
    printf( "%02x%02x", $RAM[ $PC + 1 ], $RAM[ $PC + 2 ] ) if ( $len == 3 );
    print("\t");
}

# Simulate the program
$PC = 0;
my ( $A, $B, $N, $Z, $V, $C ) = ( 0, 0, 0, 0, 0, 0 );

if ( $0 =~ m{esim$} ) {
    print("Simulating...\n");

    while (1) {

        # Keep 16 bits in PC, needed for when we +1 to the PC below
        $PC &= 0xffff;

        my $inst = $RAM[$PC];
        if ( !defined( $Instlist[$inst] ) ) {
            printf( "Undefined instruction 0x%x\n", $inst );
            exit(1);
        }

        # Get the instruction name and length
        my ( $opname, $len ) = @{ $Instlist[$inst] };
        disasm($PC) if ($debug);

        # Get any value in the instruction
        my $val;
        $val = $RAM[ $PC + 1 ] if ( $len == 2 );
        $val = ( $RAM[ $PC + 1 ] << 8 ) + $RAM[ $PC + 2 ] if ( $len == 3 );
        $PC += $len;

        if ( $opname eq 'adda' ) {
            ( $A, $N, $Z, $V, $C ) = add( $A, $B );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'suba' ) {
            ( $A, $N, $Z, $V, $C ) = minus( $A, $B );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'anda' ) {
            ( $A, $N, $Z ) = flags( $A & $B );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'ora' ) {
            ( $A, $N, $Z ) = flags( $A | $B );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'xora' ) {
            ( $A, $N, $Z ) = flags( $A ^ $B );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'jmp' ) {
            if ( $PC == ( $val + $len ) ) {
                print("Infinite loop detected, halting\n"); exit(0);
            }
            $PC = $val;
            printf( "PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'tba' ) {
            ( $A, $N, $Z ) = flags($B);
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'incb' ) {
            ( $B, $N, $Z ) = flags( $B + 1 );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'addb' ) {
            ( $B, $N, $Z, $V, $C ) = add( $A, $B );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'subb' ) {
            ( $B, $N, $Z, $V, $C ) = minus( $A, $B );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'andb' ) {
            ( $B, $N, $Z ) = flags( $A & $B );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'orb' ) {
            ( $B, $N, $Z ) = flags( $A | $B );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'xorb' ) {
            ( $B, $N, $Z ) = flags( $A ^ $B );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'tab' ) {
            ( $B, $N, $Z ) = flags($A);
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'lca' ) {
            ( $A, $N, $Z ) = flags($val);
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'lcb' ) {
            ( $B, $N, $Z ) = flags($val);
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'addm' ) {
            ( $RAM[$val], $N, $Z, $V, $C ) = add( $A, $B );
            printf( "RAM[$val] now %02x\n", $RAM[$val] ) if ($debug); next;
        }
        if ( $opname eq 'subm' ) {
            ( $RAM[$val], $N, $Z, $V, $C ) = minus( $A, $B );
            printf( "RAM[$val] now %02x\n", $RAM[$val] ) if ($debug); next;
        }
        if ( $opname eq 'andm' ) {
            ( $RAM[$val], $N, $Z ) = flags( $A & $B );
            printf( "RAM[$val] now %02x\n", $RAM[$val] ) if ($debug); next;
        }
        if ( $opname eq 'orm' ) {
            ( $RAM[$val], $N, $Z ) = flags( $A | $B );
            printf( "RAM[$val] now %02x\n", $RAM[$val] ) if ($debug); next;
        }
        if ( $opname eq 'xorm' ) {
            ( $RAM[$val], $N, $Z ) = flags( $A ^ $B );
            printf( "RAM[$val] now %02x\n", $RAM[$val] ) if ($debug); next;
        }
        if ( $opname eq 'lma' ) {
            ( $A, $N, $Z ) = flags( $RAM[$val] );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'lmb' ) {
            ( $B, $N, $Z ) = flags( $RAM[$val] );
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'jlt' ) {
            $PC = $val if ($N);
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jeq' ) {
            $PC = $val if ($Z);
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jne' ) {
            $PC = $val if ( !$Z );
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jge' ) {
            $PC = $val if ( !$N );
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jle' ) {
            $PC = $val if ( $Z || $N );
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jgt' ) {
            $PC = $val if ( !$Z && !$N );
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jcs' ) {
            $PC = $val if ($C);
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jvs' ) {
            $PC = $val if ($V);
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jcc' ) {
            $PC = $val if ( !$C );
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'jvc' ) {
            $PC = $val if ( !$V );
            printf( "NZVC $N$Z$V$C PC now %04x\n", $PC ) if ($debug); next;
        }
        if ( $opname eq 'sma' ) {
            ( $RAM[$val], $N, $Z ) = flags($A);
            printf( "RAM[%04x] now %02x\n", $val, $RAM[$val] ) if ($debug);
            next;
        }
        if ( $opname eq 'smb' ) {
            ( $RAM[$val], $N, $Z ) = flags($B);
            printf( "RAM[%04x] now %02x\n", $val, $RAM[$val] ) if ($debug);
            next;
        }
        if ( $opname eq 'lia' ) {
            ( $A, $N, $Z ) = flags( $RAM[ $val + $B ] );
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'sia' ) {
            ( $RAM[ $val + $B ], $N, $Z ) = flags($A);
            printf( "RAM[%04x] now %02x\n", $val + $B, $A ) if ($debug); next;
        }
        if ( $opname eq 'incm' ) {
            ( $RAM[$val], $N, $Z ) = flags( $RAM[$val] + 1 );
            printf( "RAM[%04x] now %02x\n", $val + $B, $A ) if ($debug); next;
        }
        if ( $opname eq 'ttoa' ) {
            if ($debug) { print( "> ", chr($A), " <\n" ); }
            else { print( chr($A) ); } next;
        }
        if ( $opname eq 'ttob' ) {
            if ($debug) { print( "> ", chr($B), " <\n" ); }
            else { print( chr($B) ); }
            next;
        }
        if ( $opname eq 'ttia' ) {
            while (1) {
                $val = getchar();
                last if ( defined($val) );
            }
            ( $A, $N, $Z ) = flags($val);
            printf( "A now %02x\n", $A ) if ($debug); next;
        }
        if ( $opname eq 'ttib' ) {
            while (1) {
                $val = getchar();
                last if ( defined($val) );
            }
            ( $B, $N, $Z ) = flags($val);
            printf( "B now %02x\n", $B ) if ($debug); next;
        }
        if ( $opname eq 'sub' ) {
            ( undef, $N, $Z, $V, $C ) = minus( $A, $B );
            print( "flags now $N$Z$V$C\n" ) if ($debug); next;
        }
        die("Unrecognised instruction $opname\n");
    }
}
